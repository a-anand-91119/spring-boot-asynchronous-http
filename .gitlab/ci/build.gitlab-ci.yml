cache:
  key: gradle-cache-$CI_COMMIT_REF_SLUG
  paths:
    - .gradle/
    - build/
    - ~/.gradle/caches/
    - ~/.gradle/wrapper/

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

.gradle-common:
  image: gradle:8.12.1-jdk23-alpine
  before_script:
    - export GRADLE_USER_HOME=$CI_PROJECT_DIR/.gradle

spotless-formatting-check:
  extends: .gradle-common
  stage: prerequisites
  script:
    - ./gradlew --no-daemon spotlessCheck
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "src/**/*.java"
        - "**/*.gradle*"
        - "gradle.properties"

unit-test:
  extends: .gradle-common
  stage: prerequisites
  script:
    - ./gradlew --no-daemon test
  interruptible: true
  artifacts:
    reports:
      junit: build/test-results/test/**/TEST-*.xml
    when: always
    expire_in: 1 week

compile-and-build-jar:
  extends: .gradle-common
  stage: build
  script:
    - ./gradlew --no-daemon clean build -x spotlessCheck -x test
  interruptible: true
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_MERGE_REQUEST_ID
      changes:
        - "src/**/*"
        - "build.gradle.kts"
        - "gradle.properties"
        - "libs.versions.toml"
        - "Dockerfile"
      when: always

.docker-image-info:
  stage: dockerize
  image: alpine:latest
  script:
    - |
      if [ -f "build/libs/*.jar" ]; then
        JARFILE=$(find build/libs -name "*.jar" | sort -V | tail -n1)
        echo "JAR_HASH=$(sha256sum $JARFILE | awk '{print $1}')" >> build.env
        echo "JAR_PATH=$JARFILE" >> build.env
        echo "SHOULD_BUILD=true" >> build.env
      else
        echo "SHOULD_BUILD=false" >> build.env
      fi
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_MERGE_REQUEST_ID
      changes:
        - "src/**/*"
        - "build.gradle.kts"
        - "gradle.properties"
        - "libs.versions.toml"
        - "Dockerfile"
      when: always

docker-image-build:
  stage: dockerize
  image: quay.io/buildah/stable
  variables:
    STORAGE_DRIVER: vfs
    BUILDAH_FORMAT: docker
    DOCKER_BUILDKIT: "1"
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - |
      # Use buildah with layer caching
      buildah build --cache-from $CI_REGISTRY_IMAGE --layers -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE:latest
      buildah push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      
      # Only push latest tag for main branch
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        buildah push $CI_REGISTRY_IMAGE:latest
      fi
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "src/**/*"
        - "build.gradle.kts"
        - "gradle.properties"
        - "libs.versions.toml"
        - "Dockerfile"
      when: always
    - if: $CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
      changes:
        - "src/**/*"
        - "build.gradle.kts"
        - "gradle.properties"
        - "libs.versions.toml"
        - "Dockerfile"
      when: manual
      allow_failure: true

argocd-deployment:
  stage: deploy
  interruptible: false
  image:
    name: alpine/helm:3.12.0
    entrypoint: [ "" ]
  variables:
    NAMESPACE: spring-projects
    ARGOCD_DEPLOY_SUB_PATH: argocd-gitops/zeus-k8s/spring-projects/asynchronous-http-server
    ARGOCD_REPOSITORY: argocd-gitops
    HELM_EXPERIMENTAL_OCI: "1"
    CHART_VERSION: "0.0.1"
    CHART_REGISTRY: "registry.gitlab.notyouraverage.dev/marketing-plg/helm-charts/charts/spring-boot-app"
  before_script:
    - apk add --no-cache git
    - git clone --depth 1 https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.notyouraverage.dev/a.anand.91119/${ARGOCD_REPOSITORY}.git
    - echo "Logging in to container registry..."
    - helm registry login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
  script:
    - |
      # Determine which values file to use
      if [ -f "./deployment/values.yaml" ]; then
        VALUES_FILE="./deployment/values.yaml"
      else
        # Pull specific values file from repo if needed or use defaults
        echo "No specific values file found, using defaults with image overrides"
        VALUES_FILE="values.yaml"
        echo "image:
          repository: ${CI_REGISTRY_IMAGE}
          tag: ${CI_COMMIT_SHORT_SHA}" > ${VALUES_FILE}
      fi
      
      # Pull the chart from the registry
      echo "Pulling Helm chart from registry..."
      helm pull oci://${CHART_REGISTRY} --version ${CHART_VERSION} --destination ./charts
      
      # Extract the chart name from the downloaded tgz file
      CHART_TGZ=$(ls ./charts/*.tgz)
      CHART_NAME=$(basename ${CHART_TGZ} .tgz)
      
      # Template using the chart from the registry
      echo "Templating Helm chart..."
      helm template release ./charts/${CHART_NAME}.tgz --values ${VALUES_FILE} --namespace ${NAMESPACE} \
        --set image.repository=${CI_REGISTRY_IMAGE} \
        --set image.tag=${CI_COMMIT_SHORT_SHA} \
        --output-dir ./manifests
      
      # Copy to GitOps repository
      echo "Updating GitOps repository..."
      rm -rf ${ARGOCD_DEPLOY_SUB_PATH}/*
      cp -r ./manifests/${CHART_NAME}/templates/* ${ARGOCD_DEPLOY_SUB_PATH}/
      
      # Clean up template artifacts
      cd ${ARGOCD_REPOSITORY}
      
      # Remove Helm test resources from GitOps (optional)
      echo "Removing test resources from GitOps deployment..."
      rm -rf ${ARGOCD_DEPLOY_SUB_PATH}/tests
      
      # Commit and push to GitOps repository
      git config --global user.email "a.anand.91119@notyouraverage.dev"
      git config --global user.name "CI/CD Bot"
      git add .
      git commit -m "Update ${CI_PROJECT_NAME} to commit ${CI_COMMIT_SHORT_SHA} using chart version ${CHART_VERSION}"
      git remote set-url origin https://gitlab-ci-token:${REPO_WRITE_TOKEN}@gitlab.notyouraverage.dev/a.anand.91119/${ARGOCD_REPOSITORY}.git
      git push origin main
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "src/**/*"
        - "build.gradle.kts"
        - "gradle.properties"
        - "libs.versions.toml"
        - "Dockerfile"
        - "deployment/**/*"
      when: always
